delta dSMS {

//package lancs.mobilemedia.core.comms
	adds {
		package lancs.mobilemedia.core.comms;

		import java.io.IOException;
		import java.io.InterruptedIOException;
		import javax.wireless.messaging.MessageConnection;

		public abstract class BaseMessaging {

			public abstract boolean sendImage(byte [] imageData);
			public abstract byte [] receiveImage() throws InterruptedIOException,
			IOException;
			public abstract void cleanUpConnections(MessageConnection conn);
		}
	}

	//package lancs.mobilemedia.core.ui;

	modifies lancs.mobilemedia.core.ui.MainUIMidlet {
		adds import lancs.mobilemedia.sms.SmsReceiverController;
		adds import lancs.mobilemedia.sms.SmsReceiverThread;

		modifies createAditionalControllers(AlbumData model,
			AlbumListScreen album, AlbumController albumController) {

			SmsReceiverController controller = new SmsReceiverController(this, model, album);
			controller.setNextController(albumController);

			SmsReceiverThread smsR = new SmsReceiverThread(this, model, album, controller);
			System.out.println("SmsController::Starting SMSReceiver Thread");
			new Thread(smsR).start();
		}
	}

	//package lancs.mobilemedia.core.ui.controller;

	modifies lancs.mobilemedia.core.ui.controller.PhotoController {
		adds import lancs.mobilemedia.sms.SmsSenderController;

		modifies extendedOperations(String name, PhotoViewScreen canvas, AbstractController nextController) {

			SmsSenderController smsController = new SmsSenderController(getMidlet(), getAlbumData(), (AlbumListScreen) getAlbumListScreen(), name);
			smsController.setNextController(nextController);
			canvas.setCommandListener(smsController);
			original(name, canvas, smsController);
		}
	}

	//package lancs.mobilemedia.core.ui.screens

	modifies lancs.mobilemedia.core.ui.screens.AddPhotoToAlbum {
		adds import javax.microedition.lcdui.Image;

		adds Image image = null;

		adds public Image getImage() {
			return image;
		}

		adds public void setImage(Image image) {
			this.image = image;
		}
	}

	modifies lancs.mobilemedia.core.ui.screens.PhotoViewScreen {

		adds public static final Command smsCopyCommand = new
		Command("Send Photo by SMS", Command.ITEM, 1);

		adds private boolean fromSMS = false;

		modifies initMenu() {
			original();
			this.addCommand(smsCopyCommand);
		}

		adds public Image getImage() {
			return image;
		}

		adds public boolean isFromSMS() {
			return fromSMS;
		}

		adds public void setFromSMS(boolean fromSMSParam) {
			fromSMS = fromSMSParam;
		}
	}

	//package lancs.mobilemedia.sms
	adds {
		package lancs.mobilemedia.sms;

		import javax.microedition.lcdui.Image;

		import lancs.mobilemedia.core.ui.controller.AbstractController;
		import lancs.mobilemedia.core.ui.controller.ControllerCommandInterface;
		import lancs.mobilemedia.core.ui.controller.PhotoViewController;
		import lancs.mobilemedia.core.ui.screens.PhotoViewScreen;

		public class AcceptPhoto implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				Image image = Image.createImage((( SmsReceiverController )
						controller).getIncomingImageData(), 0,(( SmsReceiverController )
						controller).getIncomingImageData().length);
				Image copy = Image.createImage(image.getWidth(), image.getHeight());
				PhotoViewScreen canv = new PhotoViewScreen(copy);
				canv.setFromSMS(true);
				canv.setCommandListener(new PhotoViewController(controller.getMidlet(),
						controller.getAlbumData(), controller.getAlbumListScreen(), "NoName"));
				controller.setCurrentScreen(canv);
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.sms;

		import lancs.mobilemedia.core.ui.controller.AbstractController;
		import lancs.mobilemedia.core.ui.controller.ControllerCommandInterface;

		public class CancelSend implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				System.out.println("Cancel sending of SMS message");
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.sms;

		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.Form;
		import javax.microedition.lcdui.Item;
		import javax.microedition.lcdui.TextField;

		public class NetworkScreen extends Form {

			TextField recPhoneNum = new TextField("Phone #", "5550001", 15,
				TextField.ANY);
			String rPort = "1000";

			Command ok;
			Command cancel;

			public NetworkScreen(String title) {
				super(title);
				recPhoneNum.setString("5550001");

				this.append(recPhoneNum);

				ok = new Command("Send Now", Command.OK, 0);
				cancel = new Command("Cancel", Command.EXIT, 1);
				this.addCommand(ok);
				this.addCommand(cancel);

			}

			public NetworkScreen(String title, Item [] items) {
				super(title, items);
			}

			public String getRecPhoneNum() {
				return recPhoneNum.getString();
			}

			public String getRecPort() {
				return rPort;
			}
		}
	}

	adds {
		package lancs.mobilemedia.sms;

		import lancs.mobilemedia.core.ui.controller.AbstractController;
		import lancs.mobilemedia.core.ui.controller.ControllerCommandInterface;

		public class RejectPhoto implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				return(( SmsReceiverController ) controller).goToPreviousScreen();
			}
		}
	}

	adds {
		package lancs.mobilemedia.sms;

		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.Display;

		import lancs.mobilemedia.core.ui.controller.AbstractController;
		import lancs.mobilemedia.core.ui.controller.ControllerCommandInterface;

		public class SendPhotoBySMS implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {((
					SmsSenderController ) controller).setNetworkScreen(new
					NetworkScreen("Reciever Details"));(( SmsSenderController )
					controller).setSelectedImageName((( SmsSenderController )
						controller).getImageName());(( SmsSenderController )
					controller).getNetworkScreen().setCommandListener(controller);
				controller.setCurrentScreen((( SmsSenderController )
						controller).getNetworkScreen());
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.sms;

		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.Display;

		import lancs.mobilemedia.core.ui.controller.AbstractController;
		import lancs.mobilemedia.core.ui.controller.ControllerCommandInterface;
		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.ui.datamodel.ImageAccessor;
		import lancs.mobilemedia.core.ui.datamodel.ImageData;
		import lancs.mobilemedia.lib.exceptions.ImageNotFoundException;
		import lancs.mobilemedia.lib.exceptions.NullAlbumDataReference;
		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		public class SendNow implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				ImageData ii = null;
				ImageAccessor imageAccessor = null;
				byte [] imageBytes = null;
				try {
					ii = controller.getAlbumData().getImageInfo((( SmsSenderController )
							controller).getSelectedImageName());
					imageBytes = imageAccessor.loadImageBytesFromRMS(ii.getParentAlbumName(),
						ii.getImageLabel(), ii.getForeignRecordId());
				}
				catch(ImageNotFoundException e) {
					Alert alert = new Alert("Error", "The selected image can not be found",
						null, AlertType.ERROR);
					alert.setTimeout(5000);
				}
				catch(NullAlbumDataReference e) {
					controller.setAlbumData(new AlbumData());
					Alert alert = new Alert("Error",
						"The operation is not available. Try again later !", null,
						AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert,
						Display.getDisplay(controller.getMidlet()).getCurrent());
				}
				catch(PersistenceMechanismException e) {
					Alert alert = new Alert("Error",
						"It was not possible to recovery the selected image", null,
						AlertType.ERROR);
					alert.setTimeout(5000);
				}
				System.out.println("SmsController::handleCommand - Sending bytes for image "
					+ ii.getImageLabel() + " with length: " + imageBytes.length);

				String smsPort = "1000";
				String destinationAddress = "5550001";
				String messageText = "Binary Message (No Text)";

				smsPort =(( SmsSenderController )
					controller).getNetworkScreen().getRecPort();
				destinationAddress =(( SmsSenderController )
					controller).getNetworkScreen().getRecPhoneNum();

				System.out.println("SmsController:handleCommand() - Info from Network Screen is: "
					+ smsPort + " and " + destinationAddress);

				SmsSenderThread smsS = new SmsSenderThread(smsPort, destinationAddress,
					messageText);
				smsS.setBinaryData(imageBytes);
				new Thread(smsS).start();
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.sms;

		import java.io.IOException;
		import java.io.InterruptedIOException;
		import javax.microedition.io.Connector;
		import javax.microedition.io.PushRegistry;
		import javax.wireless.messaging.BinaryMessage;
		import javax.wireless.messaging.Message;
		import javax.wireless.messaging.MessageConnection;
		import javax.wireless.messaging.TextMessage;

		public class SmsMessaging {
			private String smsSendPort;
			private String smsReceivePort = "1000";
			private String destinationPhoneNumber;
			private String smsProtocolPrefix = "sms://";
			private MessageConnection smsConn = null;
			private Message msg;
			private String [] connections;

			public SmsMessaging() {
				smsSendPort = "1000";
				smsReceivePort = "1000";
			}

			public SmsMessaging(String smsDstPort, String destinationPhoneNumber) {
				this.destinationPhoneNumber = destinationPhoneNumber;
				this.smsSendPort = smsDstPort;
			}

			public boolean sendImage(byte [] imageData) {
				boolean success = true;

				String address = destinationPhoneNumber;
				if((smsSendPort != null) &&(smsSendPort != "")) address =
				smsProtocolPrefix + address + ":" + smsSendPort + 1;

				System.out.println("SmsMessaging::sendImage: Sending binary message to: "
					+ address);

				MessageConnection smsconn = null;

				try {
					smsconn = ( MessageConnection ) Connector.open(address);

					BinaryMessage binmsg = ( BinaryMessage )
					smsconn.newMessage(MessageConnection.BINARY_MESSAGE);
					binmsg.setPayloadData(imageData);

					int i = smsconn.numberOfSegments(binmsg);
					System.out.println("SmsMessaging::sendImage() num segments to send is: "
						+ i);

					smsconn.send(binmsg);

				}
				catch(Throwable t) {
					System.out.println("Send caught: ");
					t.printStackTrace();
					return false;
				}

				cleanUpConnections(smsconn);

				return success;
			}

			public byte [] receiveImage() throws InterruptedIOException, IOException {

				System.out.println("SmsMessaging::receiveImage() - start");
				byte [] receivedData = null;
				String smsConnection = smsProtocolPrefix + ":" + smsReceivePort;
				String senderAddress;

				if(smsConn == null) {
					try {
						smsConn = ( MessageConnection ) Connector.open(smsConnection);
					}
					catch(IOException ioe) {
						ioe.printStackTrace();
					}
				}

				connections = PushRegistry.listConnections(true);
				if(connections == null || connections.length == 0) {
					System.out.println("Waiting for SMS on " + smsConnection + "...");
				}

				System.out.println("DEBUG 1: before smsConn.receive():" + smsConn);
				msg = smsConn.receive();
				System.out.println("DEBUG 2: after smsConn.receive()");

				if(msg != null) {
					senderAddress = msg.getAddress();
					System.out.println("From: " + senderAddress);

					if(msg instanceof TextMessage) {
						String incomingMessage =(( TextMessage ) msg).getPayloadText();
						System.out.println("Incoming SMS Message with Payload:" +
							incomingMessage);
					}
					else {
						System.out.println("Incoming Binary SMS Message...");
						StringBuffer buf = new StringBuffer();
						receivedData =(( BinaryMessage ) msg).getPayloadData();
						System.out.println("SmsMessaging::receiveImage: sender address = " +
							senderAddress.toString());
						System.out.println("SmsMessaging::receiveImage: buffer length = " +
							buf.length() + " contents = " + buf.toString());
					}
				}

				System.out.println("SmsMessaging::receiveImage() - Finish");

				return receivedData;
			}

			public void cleanUpConnections(MessageConnection smsConn) {
				if(smsConn != null) {
					try {
						smsConn.close();
					}
					catch(IOException ioe) {
						System.out.println("Closing connection caught: ");
						ioe.printStackTrace();
					}
				}
			}

			public void cleanUpReceiverConnections() {
				if(smsConn != null) {
					try {
						smsConn.close();
						smsConn = null;
					}
					catch(IOException ioe) {
						System.out.println("Closing connection caught: ");
						ioe.printStackTrace();
					}
				}
			}

			public String getDestinationPhoneNumber() {
				return destinationPhoneNumber;
			}

			public void setDestinationPhoneNumber(String destinationPhoneNumber) {
				this.destinationPhoneNumber = destinationPhoneNumber;
			}

			public String getSmsReceivePort() {
				return smsReceivePort;
			}

			public void setSmsReceivePort(String smsReceivePort) {
				this.smsReceivePort = smsReceivePort;
			}

			public String getSmsSendPort() {
				return smsSendPort;
			}

			public void setSmsSendPort(String smsSendPort) {
				this.smsSendPort = smsSendPort;
			}
		}
	}

	adds {
		package lancs.mobilemedia.sms;

		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.Image;
		import java.util.HashMap;
		import java.util.Map;

		import lancs.mobilemedia.core.ui.MainUIMidlet;
		import lancs.mobilemedia.core.ui.controller.AbstractController;
		import lancs.mobilemedia.core.ui.controller.ControllerCommandInterface;
		import lancs.mobilemedia.core.ui.controller.ScreenSingleton;
		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.ui.screens.AlbumListScreen;
		import lancs.mobilemedia.core.util.Constants;

		public class SmsReceiverController extends AbstractController {

			byte [] incomingImageData;

			public SmsReceiverController(MainUIMidlet midlet, AlbumData albumData,
				AlbumListScreen albumListScreen) {
				super(midlet, albumData, albumListScreen);
			}

			public void initCommandsMap() {
				commands = new HashMap();
				commands.put("Accept Photo", new AcceptPhoto());
				commands.put("Reject Photo", new RejectPhoto());
			}

			public boolean handleCommand(Command c) {

				String label = c.getLabel();
				System.out.println("SmsReceiverController::handleCommand: " + label);

				command = ( ControllerCommandInterface ) commands.get(label);

				if(command != null) {
					return command.execute(this);
				}

				else if(label.equals("Ok")) {
					goToPreviousScreen();
				}

				return false;
			}

			public void setIncommingData(byte [] incomingImageData) {
				this.incomingImageData = incomingImageData;
			}

			public boolean goToPreviousScreen() {
				getAlbumListScreen().repaintListAlbum(getAlbumData().getAlbumNames());
				setCurrentScreen(getAlbumListScreen());
				ScreenSingleton.getInstance().setCurrentScreenName(Constants.ALBUMLIST_SCREEN);
				return true;
			}

			public byte [] getIncomingImageData() {
				return incomingImageData;
			}
		}
	}

	adds {
		package lancs.mobilemedia.sms;

		import java.io.IOException;
		import java.io.InterruptedIOException;
		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.Command;
		import javax.wireless.messaging.Message;
		import javax.wireless.messaging.MessageConnection;

		import lancs.mobilemedia.core.ui.MainUIMidlet;
		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.ui.screens.AlbumListScreen;

		public class SmsReceiverThread implements Runnable {

			SmsReceiverController controller = null;
			String [] connections;
			String smsPort;
			MessageConnection smsconn;
			Message msg;
			String senderAddress;

			Command acceptPhotoCommand = new Command("Accept Photo", Command.ITEM, 1);
			Command rejectPhotoCommand = new Command("Reject Photo", Command.ITEM, 1);
			Command errorNotice = new Command("Ok", Command.ITEM, 1);

			public SmsReceiverThread(MainUIMidlet midlet, AlbumData albumData,
				AlbumListScreen albumListScreen, SmsReceiverController controller) {
				this.controller = controller;
				smsPort = "1000";
			}

			public void run() {
				SmsMessaging smsMessenger = new SmsMessaging();
				while(true) {
					smsMessenger.setSmsReceivePort(smsPort);
					byte [] receivedData = null;
					try {
						receivedData = smsMessenger.receiveImage();
					}
					catch(InterruptedIOException e) {
						Alert alert = new Alert("Error Incoming Photo");
						alert.setString("" +
							"You have just received a bad fragmentated photo which was not possible to recovery.");
						alert.addCommand(errorNotice);
						System.out.println("Error interreput");
						alert.setCommandListener(controller);
						controller.setCurrentScreen(alert);
						smsMessenger.cleanUpReceiverConnections();
						continue;
					}
					catch(IOException e) {
						Alert alert = new Alert("Error Incoming Photo");
						alert.setString("" +
							"You have just received a bad fragmentated photo which was not possible to recovery.");
						alert.addCommand(errorNotice);
						System.out.println("Bad fragmentation");
						alert.setCommandListener(controller);
						controller.setCurrentScreen(alert);
						smsMessenger.cleanUpReceiverConnections();
						continue;
					}
					Alert alert = new Alert("New Incoming Photo");
					alert.setString("A MobileMedia user has sent you a Photo. Do you want to accept it?");
					alert.addCommand(acceptPhotoCommand);
					alert.addCommand(rejectPhotoCommand);
					controller.setIncommingData(receivedData);
					alert.setCommandListener(controller);
					controller.setCurrentScreen(alert);
				}
			}
		}
	}

	adds {
		package lancs.mobilemedia.sms;

		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.Display;
		import java.util.HashMap;
		import java.util.Map;

		import lancs.mobilemedia.core.ui.MainUIMidlet;
		import lancs.mobilemedia.core.ui.controller.AbstractController;
		import lancs.mobilemedia.core.ui.controller.ControllerCommandInterface;
		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.ui.screens.AlbumListScreen;

		public class SmsSenderController extends AbstractController {

			String selectedImageName = "null";
			String imageName = "";
			NetworkScreen networkScreen;

			public SmsSenderController(MainUIMidlet midlet, AlbumData albumData,
				AlbumListScreen albumListScreen, String imageName) {
				super(midlet, albumData, albumListScreen);
				this.imageName = imageName;
			}

			public void initCommandsMap() {
				commands = new HashMap();
				commands.put("Send Photo by SMS", new SendPhotoBySMS());
				commands.put("Send Now", new SendNow());
				commands.put("Cancel Send", new CancelSend());
			}

			public void setNetworkScreen(NetworkScreen networkScreenParam) {
				networkScreen = networkScreenParam;
			}

			public NetworkScreen getNetworkScreen() {
				return networkScreen;
			}

			public String getImageName() {
				return imageName;
			}

			public String getSelectedImageName() {
				return selectedImageName;
			}

			public void setSelectedImageName(String imageNameParam) {
				selectedImageName = imageNameParam;
			}

			public boolean handleCommand(Command c) {
				String label = c.getLabel();

				System.out.println("SmsSenderController::handleCommand: " + label);

				command = ( ControllerCommandInterface ) commands.get(label);

				if(command != null) {
					return command.execute(this);
				}

				return false;
			}
		}
	}

	adds {
		package lancs.mobilemedia.sms;

		public class SmsSenderThread implements Runnable {

			private String smsPort;
			private String destinationAddress;
			private String messageText = "default";
			private byte [] binData;

			public SmsSenderThread(String smsPort, String destinationAddress, String
				messageText) {

				System.out.println("SmsSenderThread:: 3 Param Constructor: " + smsPort +
					"," + destinationAddress + "," + messageText);
				this.messageText = messageText;
				this.destinationAddress = destinationAddress;
				this.smsPort = smsPort;
			}

			public void run() {
				System.out.println("SmsSenderThread::run: Sending message: " + messageText
					+ " to: " + destinationAddress);
				SmsMessaging smsMessenger = new SmsMessaging(smsPort, destinationAddress);
				smsMessenger.sendImage(this.binData);
				System.out.println("Finishing SMSSender run()");
			}

			public String getMessageText() {
				return messageText;
			}

			public void setMessageText(String messageText) {
				this.messageText = messageText;
			}

			public void setBinaryData(byte [] data) {
				System.out.println("SmsSenderThread: setBinaryData of length: " +
					data.length);
				this.binData = data;
			}

			public String getSmsPort() {
				return smsPort;
			}

			public void setSmsPort(String smsPort) {
				this.smsPort = smsPort;
			}
		}
	}
}