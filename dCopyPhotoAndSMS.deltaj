delta dCopyPhotoAndSMS {

	//package lancs.mobilemedia.core.ui.controller

	modifies lancs.mobilemedia.core.ui.controller.CopyPhoto {

		adds import lancs.mobilemedia.core.ui.screens.PhotoViewScreen;

		modifies finishCopyCommand(AbstractController controller, AddMediaToAlbum copyPhotoToAlbum) {
			//copy from sms
			if (( (PhotoViewScreen) controller.getCurrentScreen() ).isFromSMS()) {
				copyPhotoToAlbum.setImage(( (PhotoViewScreen) controller.getCurrentScreen() ).getImage());
			}

			original(controller, copyPhotoToAlbum);
		}
	}

	modifies lancs.mobilemedia.core.ui.controller.SaveCopiedPhoto {

		adds import javax.microedition.lcdui.Image;

		modifies addImageDataToAlbum(AbstractController controller, String photoname, String albumname) {

			Image img = ((AddMediaToAlbum) controller.getCurrentScreen()).getImage();
			if (img != null) {
				controller.getAlbumData().addImageData(photoname, img, albumname);
			}
			else {
				original(controller, photoname, albumname);
			}
		}
	}

	//package lancs.mobilemedia.core.ui.datamodel

	modifies lancs.mobilemedia.core.ui.datamodel.AlbumData {

		adds public void addImageData(String photoname, Image imgdata, String albumname)
				throws InvalidImageDataException, PersistenceMechanismException {

			if (mediaAccessor instanceof ImageMediaAccessor)
					((ImageMediaAccessor) mediaAccessor).addImageData(photoname, imgdata, albumname);
		}
	}

	modifies lancs.mobilemedia.core.ui.datamodel.ImageMediaAccessor {

		adds import javax.microedition.lcdui.Image;
		adds import javax.microedition.rms.RecordStore;
		adds import javax.microedition.rms.RecordStoreException;

		adds public byte[] getByteFromImage(Image img) {
			int w = img.getWidth();
			int h = img.getHeight();
/*			int data_int[] = new int[ w * h ]; TODO review DeltaJ does not accept multiply operator *
			img.getRGB( data_int, 0, w, 0, 0, w, h );
			byte[] data_byte = new byte[ w * h * 3 ];

			for ( int i = 0; i < w * h; ++i ) {
				int color = data_int[ i ];
				int offset = i * 3;
				data_byte[ offset ] = ( byte ) ( ( color & 0xff0000 ) >> 16 );
				data_byte[ offset +	1 ] = ( byte ) ( ( color & 0xff00 ) >> 8 );
				data_byte[ offset + 2 ] = ( byte ) ( ( color & 0xff ) );
			}
			return data_byte; */
			return null;
		}

		adds public void addImageData(String photoname, Image imgdata, String albumname) throws InvalidImageDataException, PersistenceMechanismException {
			try {
				byte[] data1 = getByteFromImage(imgdata);
				addMediaArrayOfBytes(photoname, albumname, data1);
			} catch (RecordStoreException e) {
				throw new PersistenceMechanismException();
			}
		}
	}

	//package lancs.mobilemedia.core.ui.screens

	modifies lancs.mobilemedia.core.ui.screens.AddMediaToAlbum {

		adds import javax.microedition.lcdui.Image;

		adds Image image = null;

		adds public Image getImage() {
			return image;
		}

		adds public void setImage(Image image) {
			this.image = image;
		}
	}
}