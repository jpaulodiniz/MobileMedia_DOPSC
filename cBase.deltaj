delta cBase {

	//package lancs.mobilemedia.core.threads;

	adds {
		package lancs.mobilemedia.core.threads;

		public class BaseThread implements Runnable {

			public BaseThread() {
				System.out.println("BaseThread:: 0 Param Constructor used: Using default values");
			}

			public void run() {
				System.out.println("Starting BaseThread::run()");
				System.out.println("Finishing Baseathread::run()");
			}
		}
	}

	//package lancs.mobilemedia.core.ui

	adds {
		package lancs.mobilemedia.core.ui;

		import javax.microedition.midlet.MIDlet;
		import javax.microedition.midlet.MIDletStateChangeException;

		import lancs.mobilemedia.core.ui.controller.AlbumController;
		import lancs.mobilemedia.core.ui.controller.BaseController;
		import lancs.mobilemedia.core.ui.controller.MediaListController;
		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.ui.datamodel.ImageAlbumData;
		import lancs.mobilemedia.core.ui.screens.AlbumListScreen;

		public class MainUIMidlet extends MIDlet {

			private BaseController imageRootController;
			private AlbumData imageModel;

			public MainUIMidlet() {
				//do nothing
			}

			public void startApp() throws MIDletStateChangeException {

				startControllers();
				initControllers();
			}

			private void startControllers() {

				this.imageModel = new ImageAlbumData();
				AlbumListScreen album = new AlbumListScreen();
				this.imageRootController = new BaseController(this, this.imageModel, album);

				MediaListController photoListController = new MediaListController(this, this.imageModel, album);
				photoListController.setNextController(this.imageRootController);

				AlbumController albumController = new AlbumController(this, this.imageModel, album);
				albumController.setNextController(photoListController);
				album.setCommandListener(albumController);

				createAditionalControllers(this.imageModel, album, albumController);
			}

			private void initControllers() {
				this.imageRootController.init(this.imageModel);
			}

			public void pauseApp() {
			}

			public void destroyApp(boolean unconditional) {
				notifyDestroyed();
			}

			public void createAditionalControllers(AlbumData model, AlbumListScreen album, AlbumController albumController) {
				//
			}
		}
	}

	//package lancs.mobilemedia.core.ui.controller

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import java.util.HashMap;
		import java.util.Map;
		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.CommandListener;
		import javax.microedition.lcdui.Display;
		import javax.microedition.lcdui.Displayable;
		import javax.microedition.lcdui.List;

		import lancs.mobilemedia.core.ui.MainUIMidlet;
		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.ui.screens.AlbumListScreen;

		public abstract class AbstractController implements CommandListener, ControllerInterface {

			private MainUIMidlet midlet;

			private AlbumData albumData;

			private ControllerInterface nextController;

			private List albumListScreen;

			protected Map commands;

			protected ControllerCommandInterface command;

			public AbstractController(MainUIMidlet midlet, AlbumData albumData, List albumListScreen) {
				this.midlet = midlet;
				this.albumData = albumData;
				this.albumListScreen = albumListScreen;
				commands = new HashMap();
				initCommandsMap();
			}

			public abstract void initCommandsMap();

			public boolean handleCommand(Command c) {

				String label = c.getLabel();
				System.out.println(this.getClass().getName() + "::handleCommand: " + label);

				command = ( ControllerCommandInterface ) commands.get(label);

				if (command != null) {
					return command.execute(this);
				}
				return false;
			}

			public void postCommand(Command c) {
				System.out.println("AbstractController::postCommand - Current controller is: " + this.getClass().getName());

				if(handleCommand(c) == false) {
					ControllerInterface next = getNextController();
					if(next != null) {
						System.out.println("Passing to next controller in chain: " + next.getClass().getName());
						next.postCommand(c);
					}
					else {
						System.out.println("AbstractController::postCommand - Reached top of chain. No more handlers for command: " + command);
					}
				}
			}

			public void commandAction(Command c, Displayable d) {
				postCommand(c);
			}

			public void setAlbumListAsCurrentScreen(Alert a) {
				setCurrentScreen(a, albumListScreen);
			}

			public void setCurrentScreen(Alert a, Displayable d) {
				Display.getDisplay(midlet).setCurrent(a, d);
			}

			public Displayable getCurrentScreen() {
				return Display.getDisplay(midlet).getCurrent();
			}

			public void setCurrentScreen(Displayable d) {
				Display.getDisplay(midlet).setCurrent(d);
			}

			public AlbumData getAlbumData() {
				return albumData;
			}

			public void setAlbumData(AlbumData albumData) {
				this.albumData = albumData;
			}

			public ControllerInterface getNextController() {
				return nextController;
			}

			public void setNextController(ControllerInterface nextController) {
				this.nextController = nextController;
			}

			public String getCurrentStoreName() {
				return ScreenSingleton.getInstance().getCurrentStoreName();
			}

			public List getAlbumListScreen() {
				return albumListScreen;
			}

			public MainUIMidlet getMidlet() { //scope view changed (protected)
				return midlet;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import lancs.mobilemedia.core.util.Constants;
		import lancs.mobilemedia.core.ui.screens.AddMediaToAlbum;

		public class AddMedia implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				ScreenSingleton.getInstance().setCurrentScreenName(Constants.ADDPHOTOTOALBUM_SCREEN);
				AddMediaToAlbum form = new AddMediaToAlbum("Add new item to Album");
				form.setCommandListener(controller);
				controller.setCurrentScreen(form);
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import java.util.HashMap;
		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Display;
		import javax.microedition.rms.RecordStoreFullException;

		import lancs.mobilemedia.core.ui.MainUIMidlet;
		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.ui.screens.AlbumListScreen;
		import lancs.mobilemedia.core.util.Constants;
		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		public class AlbumController extends AbstractController {

			public AlbumController(MainUIMidlet midlet, AlbumData albumData,
				AlbumListScreen albumListScreen) {
				super(midlet, albumData, albumListScreen);
			}

			public void initCommandsMap() {
				commands = new HashMap();
				commands.put("Reset", new ResetAlbum());
				commands.put("Select", new SelectAlbum());
			}

			protected void resetMediaData() {
				try {
					getAlbumData().resetMediaData();
				}
				catch(PersistenceMechanismException e) {
					Alert alert = null;
					if(e.getCause() instanceof RecordStoreFullException) alert = new
					Alert("Error", "The mobile database is full", null, AlertType.ERROR);
					else alert = new Alert("Error",
						"It is not possible to reset the database", null, AlertType.ERROR);
					Display.getDisplay(getMidlet()).setCurrent(alert,
						Display.getDisplay(getMidlet()).getCurrent());
					return;
				}

				for(int i = 0; i < getAlbumListScreen().size(); i ++) {
					getAlbumListScreen().delete(i);
				}

				String [] albumNames = getAlbumData().getAlbumNames();
				for(int i = 0; i < albumNames.length; i ++) {
					if(albumNames[i] != null) {
						getAlbumListScreen().append(albumNames[i], null);
					}
				}
				setCurrentScreen(getAlbumListScreen());
			}

			protected void goToPreviousScreen() {
				System.out.println("<* AlbumController.goToPreviousScreen() *>");
			    ((AlbumListScreen) getAlbumListScreen()).repaintListAlbum(getAlbumData().getAlbumNames());
				setCurrentScreen(getAlbumListScreen());
				ScreenSingleton.getInstance().setCurrentScreenName(Constants.ALBUMLIST_SCREEN);
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import java.util.HashMap;
		import javax.microedition.lcdui.Command;

		import lancs.mobilemedia.core.ui.MainUIMidlet;
		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.ui.screens.AlbumListScreen;
		import lancs.mobilemedia.core.util.Constants;

		public class BaseController extends AbstractController {

			public BaseController(MainUIMidlet midlet, AlbumData model, AlbumListScreen
				albumListScreen) {
				super(midlet, model, albumListScreen);
			}

			public void initCommandsMap() {
				commands = new HashMap();
				commands.put("Exit", new DestroyApp());
				commands.put("Back", new GoToPreviousScreen());
				commands.put("Cancel", new GoToPreviousScreen());
				commands.put("New Album", new NewAlbum());
				commands.put("Save", new SaveAlbum());
				commands.put("Delete Album", new DeleteAlbum());
				commands.put("Yes - Delete", new ConfirmDeleteAlbum());
				commands.put("No - Delete", new GoToPreviousScreen());
			}

			public void init(AlbumData model) {
				String [] albumNames = model.getAlbumNames();
				for(int i = 0; i < albumNames.length; i ++) {
					if(albumNames[i] != null) {
						getAlbumListScreen().append(albumNames[i], null);
					}
				}
				((AlbumListScreen) getAlbumListScreen()).initMenu();
				setCurrentScreen(getAlbumListScreen());
			}

			public boolean handleCommand(Command c) {

				String label = c.getLabel();
				System.out.println(this.getClass().getName() + "::handleCommand: " +
					label);

				command = ( ControllerCommandInterface ) commands.get(label);

				if(command != null) {
					return command.execute(this);
				}
				return false;
			}

			protected boolean goToPreviousScreen() {
				System.out.println("<* AlbumController.goToPreviousScreen() *>");
				String currentScreenName =
				ScreenSingleton.getInstance().getCurrentScreenName();
				if((currentScreenName.equals(Constants.IMAGELIST_SCREEN))
					||(currentScreenName.equals(Constants.NEWALBUM_SCREEN))
					||(currentScreenName.equals(Constants.CONFIRMDELETEALBUM_SCREEN))) {
					((AlbumListScreen) getAlbumListScreen()).repaintListAlbum(getAlbumData().getAlbumNames());
					setCurrentScreen(getAlbumListScreen());
					ScreenSingleton.getInstance().setCurrentScreenName(Constants.ALBUMLIST_SCREEN);
					return true;
				}

				return false;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		public interface ControllerCommandInterface {

			public boolean execute(AbstractController controller);
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Display;

		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		public class ConfirmDeleteAlbum implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				try {
					controller.getAlbumData().deleteAlbum(ScreenSingleton.getInstance().getCurrentStoreName());
				}
				catch(PersistenceMechanismException e) {
					Alert alert = new Alert("Error", "The mobile database can not delete this photo album",
							null, AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert,
							Display.getDisplay(controller.getMidlet()).getCurrent());
				}
				(( AlbumController ) controller).goToPreviousScreen();
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import javax.microedition.lcdui.Command;

		public interface ControllerInterface {

			public void postCommand(Command c);

			public boolean handleCommand(Command c);
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.Display;
		import javax.microedition.lcdui.List;

		import lancs.mobilemedia.core.util.Constants;

		public class DeleteAlbum implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				System.out.println("Delete Photo Album here");
				List down = ( List )
				Display.getDisplay(controller.getMidlet()).getCurrent();
				ScreenSingleton.getInstance().setCurrentScreenName(Constants.CONFIRMDELETEALBUM_SCREEN);
				ScreenSingleton.getInstance().setCurrentStoreName(down.getString(down.getSelectedIndex()));
				String message = "Would you like to remove the album " +
				ScreenSingleton.getInstance().getCurrentStoreName();
				Alert deleteConfAlert = new Alert("Delete Photo Album", message, null,
					AlertType.CONFIRMATION);
				deleteConfAlert.setTimeout(Alert.FOREVER);
				deleteConfAlert.addCommand(new Command("Yes - Delete", Command.OK, 2));
				deleteConfAlert.addCommand(new Command("No - Delete", Command.CANCEL, 2));
				controller.setAlbumListAsCurrentScreen(deleteConfAlert);
				deleteConfAlert.setCommandListener(controller);
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Display;

		import lancs.mobilemedia.core.util.Constants;
		import lancs.mobilemedia.lib.exceptions.ImageNotFoundException;
		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		public class DeleteMedia implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				String selectedMediaName =(( MediaController )
					controller).getSelectedMediaName();
				try {
					controller.getAlbumData().deleteMedia(controller.getCurrentStoreName(),
						selectedMediaName);
				}
				catch(PersistenceMechanismException e) {
					Alert alert = new Alert("Error",
						"The mobile database can not delete this item", null, AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert,
						Display.getDisplay(controller.getMidlet()).getCurrent());
					return true;
				}
				catch(ImageNotFoundException e) {
					Alert alert = new Alert("Error",
						"The selected item was not found in the mobile device", null,
						AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert,
						Display.getDisplay(controller.getMidlet()).getCurrent());
					return true;
				}

				(( MediaListController )controller).showMediaList(controller.getCurrentStoreName());
				ScreenSingleton.getInstance().setCurrentScreenName(Constants.IMAGELIST_SCREEN);
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import lancs.mobilemedia.core.ui.controller.ControllerCommandInterface;

		public class DestroyApp implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				controller.getMidlet().destroyApp(true);
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Display;

		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.ui.screens.NewLabelScreen;
		import lancs.mobilemedia.lib.exceptions.ImageNotFoundException;
		import lancs.mobilemedia.lib.exceptions.NullAlbumDataReference;

		public class EditMediaLabel implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				String selectedMediaName =(( MediaController )
					controller).getSelectedMediaName();
				try {(( MediaController )
						controller).setMedia(controller.getAlbumData().getMediaInfo(selectedMediaName));

					NewLabelScreen formScreen = new NewLabelScreen("Edit Label Item",
						NewLabelScreen.LABEL_PHOTO);
					formScreen.setCommandListener(controller);(( MediaController )
						controller).setScreen(formScreen);(( MediaController )
						controller).setCurrentScreen(formScreen);
					formScreen = null;
				}
				catch(ImageNotFoundException e) {
					Alert alert = new Alert("Error",
						"The selected item was not found in the mobile device", null,
						AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert,
						Display.getDisplay(controller.getMidlet()).getCurrent());
				}
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		public class GoToPreviousScreen implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {(( BaseController )
					controller).goToPreviousScreen();
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.CommandListener;
		import javax.microedition.lcdui.Displayable;
		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Display;
		import javax.microedition.lcdui.Image;
		import javax.microedition.lcdui.List;
		import javax.microedition.rms.RecordStoreFullException;
		import java.util.HashMap;
		import java.util.Map;

		import lancs.mobilemedia.core.ui.MainUIMidlet;
		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.ui.datamodel.ImageAlbumData;
		import lancs.mobilemedia.core.ui.datamodel.MediaData;
		import lancs.mobilemedia.core.ui.screens.AlbumListScreen;
		import lancs.mobilemedia.core.ui.screens.NewLabelScreen;
		import lancs.mobilemedia.core.ui.screens.PhotoViewScreen;
		import lancs.mobilemedia.core.util.Constants;
		import lancs.mobilemedia.lib.exceptions.ImageNotFoundException;
		import lancs.mobilemedia.lib.exceptions.ImagePathNotValidException;
		import lancs.mobilemedia.lib.exceptions.InvalidImageDataException;
		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		public class MediaController extends MediaListController {

			private MediaData media;

			private NewLabelScreen screen;

			public MediaController(MainUIMidlet midlet, AlbumData albumData,
				AlbumListScreen albumListScreen) {
				super(midlet, albumData, albumListScreen);
				super.commands = new HashMap(); //moved from initCommandsMap
			}

			public void initCommandsMap() {
				commands.put("Add", new AddMedia());
				commands.put("Save Item", new SaveItem());
				commands.put("Delete", new DeleteMedia());
				commands.put("Edit Label", new EditMediaLabel());
				commands.put("Save", new SaveMediaLabel());
				initAditionalCommandsToMap();
			}

			public void initAditionalCommandsToMap() { //specific to Photo
				commands.put("View", new ViewPhoto());
			}

			public boolean handleCommand(Command c) {

				String label = c.getLabel();
				System.out.println("<* MediaController.handleCommand() *> " + label);

				command = ( ControllerCommandInterface ) commands.get(label);

				if(command != null) {
					return command.execute(this);
				}
				else if(label.equals("Back")) {
					return goToPreviousScreen();
				}
				else if(label.equals("Cancel")) {
					return goToPreviousScreen();
				}

				return false;
			}

			void updateMedia(MediaData media) throws InvalidImageDataException, PersistenceMechanismException {
				getAlbumData().updateMediaInfo(media, media);
			}

			public String getSelectedMediaName() {
				List selected = ( List ) Display.getDisplay(getMidlet()).getCurrent();
				if(selected == null)
				System.out.println("Current List from display is NULL!");
				String name = selected.getString(selected.getSelectedIndex());
				return name;
			}

			public void showImage(String name) {
				Image storedImage = null;
				try {
					storedImage =(( ImageAlbumData )
						getAlbumData()).getImageFromRecordStore(getCurrentStoreName(), name);
				}
				catch(ImageNotFoundException e) {
					Alert alert = new Alert("Error",
						"The selected photo was not found in the mobile device", null,
						AlertType.ERROR);
					Display.getDisplay(getMidlet()).setCurrent(alert,
						Display.getDisplay(getMidlet()).getCurrent());
					return;
				}
				catch(PersistenceMechanismException e) {
					Alert alert = new Alert("Error",
						"The mobile database can open this photo", null, AlertType.ERROR);
					Display.getDisplay(getMidlet()).setCurrent(alert,
						Display.getDisplay(getMidlet()).getCurrent());
					return;
				}

				PhotoViewScreen canv = new PhotoViewScreen(storedImage);
				canv.setCommandListener(this);
				AbstractController nextController = this;

				extendedOperations(name, canv, nextController);

				setCurrentScreen(canv);
			}

			protected void extendedOperations(String name, PhotoViewScreen canvas,
				AbstractController nextController) {

			}

			protected boolean goToPreviousScreen() {
				System.out.println("<* PhotoController.goToPreviousScreen() *>");
				String currentScreenName =
				ScreenSingleton.getInstance().getCurrentScreenName();
				if(currentScreenName.equals(Constants.ALBUMLIST_SCREEN)) {
					System.out.println("Can't go back here...Should never reach this spot");
				}
				else if(currentScreenName.equals(Constants.IMAGE_SCREEN)) {
					showMediaList(getCurrentStoreName());
					ScreenSingleton.getInstance().setCurrentScreenName(Constants.IMAGELIST_SCREEN);
					return true;
				}
				else if(currentScreenName.equals(Constants.ADDPHOTOTOALBUM_SCREEN)) {
					showMediaList(getCurrentStoreName());
					ScreenSingleton.getInstance().setCurrentScreenName(Constants.IMAGELIST_SCREEN);
					return true;
				}
				return false;
			}

			public void setMedia(MediaData mediaParam) {
				media = mediaParam;
			}

			public MediaData getMedia() {
				return media;
			}

			public void setScreen(NewLabelScreen screenParam) {
				screen = screenParam;
			}

			public NewLabelScreen getScreen() {
				return screen;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import java.util.HashMap;
		import java.util.Map;
		import javax.microedition.midlet.MIDlet;
		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.CommandListener;
		import javax.microedition.lcdui.Display;
		import javax.microedition.lcdui.Displayable;
		import javax.microedition.lcdui.Image;
		import javax.microedition.lcdui.List;
		import javax.microedition.rms.RecordStoreFullException;

		import lancs.mobilemedia.core.ui.MainUIMidlet;
		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.ui.datamodel.MediaData;
		import lancs.mobilemedia.core.ui.screens.AlbumListScreen;
		import lancs.mobilemedia.core.ui.screens.MediaListScreen;
		import lancs.mobilemedia.core.util.Constants;
		import lancs.mobilemedia.lib.exceptions.UnavailablePhotoAlbumException;

		public class MediaListController extends AbstractController {

			public static final int SHOW_MEDIA_LIST_DEFAULT_MODE = 1; //used as showMediaList parameter

			public MediaListController(MainUIMidlet midlet, AlbumData albumData,
				AlbumListScreen albumListScreen) {
				super(midlet, albumData, albumListScreen);
			}

			public void initCommandsMap() {
				commands = new HashMap();
				commands.put("Select", new SelectAlbum());
			}

			public void showMediaList(String recordName) {
				showMediaList(recordName, SHOW_MEDIA_LIST_DEFAULT_MODE);
			}

			public void showMediaList(String recordName, int mediaListMode) {

				if(recordName == null) recordName = getCurrentStoreName();

				MediaController mediaController = new MediaController(getMidlet(), getAlbumData(),
						( AlbumListScreen ) getAlbumListScreen() );
				mediaController.setNextController(this);

				MediaListScreen mediaList = null;
				createMediaList(mediaList); //TODO ver aqui
				mediaList.setCommandListener(mediaController);
				mediaList.initMenu();

				MediaData [] medias = null;
				try {
					medias = getAlbumData().getMedias(recordName);
				}
				catch(UnavailablePhotoAlbumException e) {
					Alert alert = new Alert("Error", "The list of items can not be recovered", null, AlertType.ERROR);
					Display.getDisplay(getMidlet()).setCurrent(alert, Display.getDisplay(getMidlet()).getCurrent());
					return;
				}

				if (medias == null) return;

				fillMediaList(mediaList, medias, mediaListMode);

				setCurrentScreen(mediaList);
			}

			private void fillMediaList(MediaListScreen mediaList, MediaData [] medias, int mediaListMode) {

				if (mediaListMode == SHOW_MEDIA_LIST_DEFAULT_MODE) {
					for(int i = 0; i < medias.length; i++) {
						if (medias[i] != null) {
							mediaList.append(medias[i].getMediaLabel(), null);
						}
					}
				}
			}

			protected MediaListScreen createMediaList(MediaListScreen mediaList) {
				//if (getAlbumData() instanceof ImageAlbumData) not necessary since Photo belongs to core
				return new MediaListScreen(MediaListScreen.SHOWPHOTO);
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import lancs.mobilemedia.core.ui.screens.NewLabelScreen;
		import lancs.mobilemedia.core.util.Constants;

		public class NewAlbum implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {

				System.out.println("Create new Photo Album here");
				ScreenSingleton.getInstance().setCurrentScreenName(Constants.NEWALBUM_SCREEN);
				NewLabelScreen canv = new NewLabelScreen("Add new Photo Album", NewLabelScreen.NEW_ALBUM);
				canv.setCommandListener(controller);
				controller.setCurrentScreen(canv);
				canv = null;
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import lancs.mobilemedia.core.util.Constants;

		public class ResetAlbum implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				System.out.println("<* BaseController.handleCommand() *> Reset Photo Album");
				(( AlbumController ) controller).resetMediaData();
				ScreenSingleton.getInstance().setCurrentScreenName(Constants.ALBUMLIST_SCREEN);
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import java.util.HashMap;
		import javax.microedition.lcdui.Command;

		import lancs.mobilemedia.core.ui.MainUIMidlet;
		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.ui.screens.AlbumListScreen;

		public class PhotoViewController extends AbstractController {

			String imageName = "";

			public PhotoViewController(MainUIMidlet midlet, AlbumData albumData,
				AlbumListScreen albumListScreen, String imageName) {
				super(midlet, albumData, albumListScreen);
				this.imageName = imageName;
			}

			public void initCommandsMap() {
				commands = new HashMap();
			}

			public String getImageName() {
				return imageName;
			}

			public boolean handleCommand(Command c) {

				String label = c.getLabel();
				System.out.println("<* PhotoViewController.handleCommand() *> " + label);

				command = ( ControllerCommandInterface ) commands.get(label);

				if(command != null) {
					return command.execute(this);
				}
				return false;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Display;
		import javax.microedition.rms.RecordStoreFullException;

		import lancs.mobilemedia.core.ui.screens.NewLabelScreen;
		import lancs.mobilemedia.lib.exceptions.InvalidPhotoAlbumNameException;
		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		public class SaveAlbum implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				try {
					if(controller.getCurrentScreen() instanceof NewLabelScreen) {
						NewLabelScreen currentScreen = ( NewLabelScreen ) controller.getCurrentScreen();
						if (currentScreen.getFormType() == NewLabelScreen.NEW_ALBUM)
							controller.getAlbumData().createNewAlbum(currentScreen.getLabelName());
						else if(currentScreen.getFormType() == NewLabelScreen.LABEL_PHOTO) {

						}
					}
				}
				catch(PersistenceMechanismException e) {
					Alert alert = null;
					if(e.getCause() instanceof RecordStoreFullException) alert = new
					Alert("Error", "The mobile database is full", null, AlertType.ERROR);
					else alert = new Alert("Error",
						"The mobile database can not add a new photo album", null,
						AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert,
						Display.getDisplay(controller.getMidlet()).getCurrent());
					return true;
				}
				catch(InvalidPhotoAlbumNameException e) {
					Alert alert = new Alert("Error",
						"You have provided an invalid Photo Album name", null, AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert,
						Display.getDisplay(controller.getMidlet()).getCurrent());
					return true;
				}

				GoToPreviousScreen previousScreen = new GoToPreviousScreen();
				return previousScreen.execute(controller);
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Display;
		import javax.microedition.rms.RecordStoreFullException;

		import lancs.mobilemedia.core.ui.screens.AddMediaToAlbum;
		import lancs.mobilemedia.lib.exceptions.InvalidImageDataException;
		import lancs.mobilemedia.lib.exceptions.ImagePathNotValidException;
		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		public class SaveItem implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				try {
					controller.getAlbumData().addNewMediaToAlbum(((AddMediaToAlbum) controller.getCurrentScreen()).getItemName(),
							((AddMediaToAlbum) controller.getCurrentScreen()).getPath(), controller.getCurrentStoreName());
				} catch (InvalidImageDataException e) {
					Alert alert = null;
					if (e instanceof ImagePathNotValidException)
						alert = new Alert("Error", "The path is not valid", null, AlertType.ERROR);
					else
						alert = new Alert("Error", "The image file format is not valid", null, AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert, Display.getDisplay(controller.getMidlet()).getCurrent());
					return true;
				} catch (PersistenceMechanismException e) {
					Alert alert = null;
					if (e.getCause() instanceof RecordStoreFullException)
						alert = new Alert("Error", "The mobile database is full", null, AlertType.ERROR);
					else
						alert = new Alert("Error", "The mobile database can not add a new photo", null, AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert, Display.getDisplay(controller.getMidlet()).getCurrent());
				}
				return ((MediaController) controller).goToPreviousScreen();
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Display;

		import lancs.mobilemedia.lib.exceptions.InvalidImageDataException;
		import lancs.mobilemedia.lib.exceptions.ImagePathNotValidException;
		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		public class SaveMediaLabel implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				((MediaController) controller).getMedia().setMediaLabel(((MediaController) controller).getScreen().getLabelName());
				System.out.println("<* PhotoController.handleCommand() *> Save Photo Label = " + ((MediaController) controller).getScreen().getLabelName());
				try {
					((MediaController) controller).updateMedia(((MediaController) controller).getMedia());
				} catch (InvalidImageDataException e) {
					Alert alert = null;
					if (e instanceof ImagePathNotValidException)
						alert = new Alert("Error", "The path is not valid", null, AlertType.ERROR);
					else
						alert = new Alert("Error", "The image file format is not valid", null, AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert, Display.getDisplay(controller.getMidlet()).getCurrent());
				} catch (PersistenceMechanismException e) {
					Alert alert = new Alert("Error", "The mobile database can not update this photo", null, AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert, Display.getDisplay(controller.getMidlet()).getCurrent());
				}
				return ((MediaController) controller).goToPreviousScreen();
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		public class ScreenSingleton {

			private static ScreenSingleton instance;
			private String currentScreenName;
			private String currentStoreName = "My Photo Album";

			private ScreenSingleton() {
			}

			public static ScreenSingleton getInstance() {
				if(instance == null) instance = new ScreenSingleton();
				return instance;
			}

			public void setCurrentScreenName(String currentScreenName) {
				this.currentScreenName = currentScreenName;
			}

			public String getCurrentScreenName() {
				return currentScreenName;
			}

			public void setCurrentStoreName(String currentStoreName) {
				this.currentStoreName = currentStoreName;
			}

			public String getCurrentStoreName() {
				return currentStoreName;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import javax.microedition.lcdui.Display;
		import javax.microedition.lcdui.List;

		import lancs.mobilemedia.core.util.Constants;

		public class SelectAlbum implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				List down = (List) Display.getDisplay(controller.getMidlet()).getCurrent();
				ScreenSingleton.getInstance().setCurrentStoreName(down.getString(down.getSelectedIndex()));
				((MediaListController) controller).showMediaList(controller.getCurrentStoreName());
				ScreenSingleton.getInstance().setCurrentScreenName( Constants.IMAGELIST_SCREEN);
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import lancs.mobilemedia.core.util.Constants;

		public class ViewPhoto implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {

				(( MediaController )controller).showImage((( MediaController )controller).getSelectedMediaName());
				ScreenSingleton.getInstance().setCurrentScreenName(Constants.IMAGE_SCREEN);
				return true;
			}
		}
	}

	//package lancs.mobilemedia.core.ui.datamodel

	adds {
		package lancs.mobilemedia.core.ui.datamodel;

		import java.util.Hashtable;
		import javax.microedition.lcdui.Image;

		import lancs.mobilemedia.lib.exceptions.ImageNotFoundException;
		import lancs.mobilemedia.lib.exceptions.InvalidImageDataException;
		import lancs.mobilemedia.lib.exceptions.InvalidPhotoAlbumNameException;
		import lancs.mobilemedia.lib.exceptions.NullAlbumDataReference;
		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;
		import lancs.mobilemedia.lib.exceptions.UnavailablePhotoAlbumException;

		public class AlbumData {

			protected MediaAccessor mediaAccessor;

			public void createNewAlbum(String albumName) throws PersistenceMechanismException, InvalidPhotoAlbumNameException {
				mediaAccessor.createNewAlbum(albumName);
			}

			public void deleteAlbum(String albumName) throws
			PersistenceMechanismException {
				mediaAccessor.deleteAlbum(albumName);
			}

			public void addNewMediaToAlbum(String label, String path, String album) throws InvalidImageDataException, PersistenceMechanismException{
				mediaAccessor.addMediaData(label, path, album);
			}

			public void deleteMedia(String mediaName, String storeName)
					throws PersistenceMechanismException, ImageNotFoundException {
				mediaAccessor.deleteSingleMediaFromRMS(mediaName, storeName);
			}

			public String [] getAlbumNames() {
				try {
					mediaAccessor.loadAlbums();
				}
				catch(InvalidImageDataException e) {
					e.printStackTrace();
				}
				catch(PersistenceMechanismException e) {
					e.printStackTrace();
				}
				return mediaAccessor.getAlbumNames();
			}

			public MediaData [] getMedias(String recordName) throws UnavailablePhotoAlbumException {

				MediaData [] result;
				try {
					result = mediaAccessor.loadMediaDataFromRMS(recordName);
				}
				catch(PersistenceMechanismException e) {
					throw new UnavailablePhotoAlbumException(e);

				}
				catch(InvalidImageDataException e) {
					throw new UnavailablePhotoAlbumException(e);
				}

				return result;
			}

			public void resetMediaData() throws PersistenceMechanismException {
				try {
					mediaAccessor.resetRecordStore();
				}
				catch(InvalidImageDataException e) {
					e.printStackTrace();
				}
			}

			public MediaData getMediaInfo(String imageName) throws ImageNotFoundException {
				return mediaAccessor.getMediaInfo(imageName);
			}

			public MediaData [] loadMediaDataFromRMS(String recordName)
					throws PersistenceMechanismException, InvalidImageDataException {
				return mediaAccessor.loadMediaDataFromRMS(recordName);
			}

			public boolean updateMediaInfo(MediaData oldData, MediaData newData)
					throws InvalidImageDataException, PersistenceMechanismException {
				return mediaAccessor.updateMediaInfo(oldData, newData);
			}

			public byte [] loadMediaBytesFromRMS(String recordName, int recordId)
					throws PersistenceMechanismException {
				return mediaAccessor.loadMediaBytesFromRMS(recordName, recordId);
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.datamodel;

		import javax.microedition.lcdui.Image;
		import javax.microedition.rms.RecordStore;
		import javax.microedition.rms.RecordStoreException;

		import lancs.mobilemedia.core.util.MediaUtil;
		import lancs.mobilemedia.lib.exceptions.ImagePathNotValidException;
		import lancs.mobilemedia.lib.exceptions.InvalidArrayFormatException;
		import lancs.mobilemedia.lib.exceptions.InvalidImageDataException;
		import lancs.mobilemedia.lib.exceptions.InvalidImageFormatException;
		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		public class ImageMediaAccessor extends MediaAccessor {

			private MediaUtil converter = new MediaUtil();

			public ImageMediaAccessor() {
				super("mpa-", "mpi-", "My Photo Album");
			}

			public void resetRecordStore() throws InvalidImageDataException, PersistenceMechanismException {

				String storeName = null;
				String infoStoreName = null;

				if(albumNames != null) {
					for(int i = 0; i < albumNames.length; i ++) {
						try {
							storeName = album_label + albumNames[i];
							infoStoreName = info_label + albumNames[i];

							System.out.println("<* ImageAccessor.resetImageRecordStore() *> delete "
								+ storeName);

							RecordStore.deleteRecordStore(storeName);
							RecordStore.deleteRecordStore(infoStoreName);
						}
						catch(RecordStoreException e) {
							System.out.println("No record store named " + storeName + " to delete.");
							System.out.println("...or...No record store named " + infoStoreName + " to delete.");
							System.out.println("Ignoring Exception: " + e);
						}
					}
				}
				else {
					System.out.println("ImageAccessor::resetImageRecordStore: albumNames array was null. Nothing to delete.");
				}

				addMediaData("Tucan Sam", "/images/Tucan.png", default_album_name);
				addMediaData("Linux Penguin", "/images/Penguin.png", default_album_name);
				addMediaData("Duke (Sun)", "/images/Duke1.PNG", default_album_name);
				addMediaData("UBC Logo", "/images/ubcLogo.PNG", default_album_name);
				addMediaData("Gail", "/images/Gail1.PNG", default_album_name);
				addMediaData("J. Gosling", "/images/Gosling1.PNG", default_album_name);
				addMediaData("Gregor", "/images/Gregor1.PNG", default_album_name);
				addMediaData("Kris", "/images/Kdvolder1.PNG", default_album_name);
			}

			protected byte [] getMediaArrayOfByte(String path)
					throws ImagePathNotValidException, InvalidImageFormatException {
				byte [] data1 = converter.readMediaAsByteArray(path);
				return data1;
			}

			protected byte [] getByteFromMediaInfo(MediaData ii) throws InvalidImageDataException {
				return converter.getBytesFromMediaInfo(ii);
			}

			protected MediaData getMediaFromBytes(byte [] data) throws
			InvalidArrayFormatException {
				MediaData iiObject = converter.getMediaInfoFromBytes(data);
				return iiObject;
			}

			public Image loadSingleImageFromRMS(String recordName, int recordId)
					throws PersistenceMechanismException {

				Image img = null;
				byte [] imageData = loadMediaBytesFromRMS(recordName, recordId);
				img = Image.createImage(imageData, 0, imageData.length);
				return img;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.datamodel;

		import javax.microedition.lcdui.Image;

		import lancs.mobilemedia.lib.exceptions.ImageNotFoundException;
		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		public class ImageAlbumData extends AlbumData {

			public ImageAlbumData() {
				mediaAccessor = new ImageMediaAccessor();
			}

			public Image getImageFromRecordStore(String recordStore, String imageName)
					throws ImageNotFoundException, PersistenceMechanismException {
				MediaData imageInfo = null;
				imageInfo = mediaAccessor.getMediaInfo(imageName);

				int imageId = imageInfo.getForeignRecordId();
				String album = imageInfo.getParentAlbumName();
				Image imageRec =(( ImageMediaAccessor )	mediaAccessor).loadSingleImageFromRMS(album, imageId); //rs.getRecord(recordId);
				return imageRec;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.datamodel;

		import java.util.Hashtable;
		import java.util.Vector;

		import javax.microedition.rms.RecordEnumeration;
		import javax.microedition.rms.RecordStore;
		import javax.microedition.rms.RecordStoreException;
		import javax.microedition.rms.RecordStoreFullException;
		import javax.microedition.rms.RecordStoreNotFoundException;
		import javax.microedition.rms.RecordStoreNotOpenException;

		import lancs.mobilemedia.lib.exceptions.ImageNotFoundException;
		import lancs.mobilemedia.lib.exceptions.ImagePathNotValidException;
		import lancs.mobilemedia.lib.exceptions.InvalidArrayFormatException;
		import lancs.mobilemedia.lib.exceptions.InvalidImageDataException;
		import lancs.mobilemedia.lib.exceptions.InvalidImageFormatException;
		import lancs.mobilemedia.lib.exceptions.InvalidPhotoAlbumNameException;
		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		public abstract class MediaAccessor {

			protected String album_label;
			protected String info_label;
			protected String default_album_name;
			protected Hashtable mediaInfoTable = new Hashtable();
			protected String [] albumNames;
			protected RecordStore mediaRS = null;
			protected RecordStore mediaInfoRS = null;

			public MediaAccessor(String album_label, String info_label, String
				default_album_name) {
				this.album_label = album_label;
				this.info_label = info_label;
				this.default_album_name = default_album_name;
			}

			public void loadAlbums() throws InvalidImageDataException, PersistenceMechanismException {
				String [] currentStores = RecordStore.listRecordStores();

				if(currentStores != null) {
					System.out.println("MediaAccessor::loadAlbums: Found: " +
						currentStores.length + " existing record stores");
					String [] temp = new String[currentStores.length];
					int count = 0;

					for(int i = 0; i < currentStores.length; i ++) {
						String curr = currentStores[i];
						System.out.println("MediaAccessor::loadAlbums: Current store" + curr + "=" + album_label);

						if(curr.startsWith(album_label)) {
							curr = curr.substring(4);
							temp[i] = curr;
							count ++;
						}
					}

					albumNames = new String[count];
					int count2 = 0;
					for(int i = 0; i < temp.length; i ++) {
						if(temp[i] != null) {
							albumNames[count2] = temp[i];
							count2 ++;
						}
					}
				}
				else {
					System.out.println("MediaAccessor::loadAlbums: 0 record stores exist. Creating default one.");
					resetRecordStore();
					loadAlbums();
				}
			}

			protected abstract void resetRecordStore()
					throws InvalidImageDataException, PersistenceMechanismException;

			protected abstract byte [] getByteFromMediaInfo(MediaData ii) throws InvalidImageDataException;

			protected abstract byte [] getMediaArrayOfByte(String path)
					throws ImagePathNotValidException, InvalidImageFormatException;

			protected abstract MediaData getMediaFromBytes(byte [] data) throws InvalidArrayFormatException;

			public void addMediaData(String photoname, String path, String albumname)
					throws InvalidImageDataException, PersistenceMechanismException {
				try {
					byte [] data1 = getMediaArrayOfByte(path);
					addMediaArrayOfBytes(photoname, albumname, data1);
				}
				catch(RecordStoreException e) {
					throw new PersistenceMechanismException();
				}
			}

			protected void addMediaArrayOfBytes(String photoname, String albumname,
					byte [] data1) throws RecordStoreException, RecordStoreFullException,
			RecordStoreNotFoundException, RecordStoreNotOpenException,
			InvalidImageDataException {

				mediaRS = RecordStore.openRecordStore(album_label + albumname, true);
				mediaInfoRS = RecordStore.openRecordStore(info_label + albumname, true);

				int rid;
				int rid2;
				rid = mediaRS.addRecord(data1, 0, data1.length);
				MediaData ii = new MediaData(rid, album_label + albumname, photoname);
				rid2 = mediaInfoRS.getNextRecordID();
				ii.setRecordId(rid2);
				data1 = getByteFromMediaInfo(ii);
				mediaInfoRS.addRecord(data1, 0, data1.length);
				mediaRS.closeRecordStore();
				mediaInfoRS.closeRecordStore();
			}

			public MediaData [] loadMediaDataFromRMS(String recordName)
					throws PersistenceMechanismException, InvalidImageDataException {
				Vector mediaVector = new Vector();
				try {
					String infoStoreName = info_label + recordName;
					RecordStore infoStore = RecordStore.openRecordStore(infoStoreName, false);
					RecordEnumeration isEnum = infoStore.enumerateRecords(null, null, false);

					while(isEnum.hasNextElement()) {
						int currentId = isEnum.nextRecordId();
						byte [] data = infoStore.getRecord(currentId);

						MediaData iiObject = getMediaFromBytes(data);

						String label = iiObject.getMediaLabel();
						mediaVector.addElement(iiObject);
						getMediaInfoTable().put(label, iiObject);
					}

					infoStore.closeRecordStore();

				}
				catch(RecordStoreException rse) {
					throw new PersistenceMechanismException(rse);
				}

				MediaData [] labelArray = new MediaData[mediaVector.size()];
				mediaVector.copyInto(labelArray);
				return labelArray;
			}

			public boolean updateMediaInfo(MediaData oldData, MediaData newData)
					throws InvalidImageDataException, PersistenceMechanismException {
				boolean success = false;
				RecordStore infoStore = null;
				try {
					String infoStoreName = oldData.getParentAlbumName();
					infoStoreName = info_label +
					infoStoreName.substring(album_label.length());
					infoStore = RecordStore.openRecordStore(infoStoreName, false);

					byte [] mediaDataBytes = getByteFromMediaInfo(newData);

					infoStore.setRecord(oldData.getRecordId(), mediaDataBytes, 0,
						mediaDataBytes.length);

				}
				catch(RecordStoreException rse) {
					throw new PersistenceMechanismException(rse);
				}

				setMediaInfo(oldData.getMediaLabel(), newData);

				try {
					infoStore.closeRecordStore();
				}
				catch(RecordStoreNotOpenException e) {
				}
				catch(RecordStoreException e) {
					throw new PersistenceMechanismException(e);
				}

				return success;
			}

			public MediaData getMediaInfo(String imageName) throws ImageNotFoundException {

				MediaData ii = ( MediaData ) getMediaInfoTable().get(imageName);

				if (ii == null)
						throw new ImageNotFoundException(imageName + " was NULL in ImageAccessor Hashtable.");

				return ii;
			}

			public void setMediaInfo(String mediaName, MediaData newData) {
				getMediaInfoTable().put(newData.getMediaLabel(), newData);
			}

			public byte [] loadMediaBytesFromRMS(String recordName, int recordId)
			throws PersistenceMechanismException {

				byte [] mediaData = null;

				try {
					RecordStore albumStore = RecordStore.openRecordStore(recordName, false);
					mediaData = albumStore.getRecord(recordId);
					albumStore.closeRecordStore();
				}
				catch(RecordStoreException rse) {
					System.out.println("Error:" + rse.getMessage());
					throw new PersistenceMechanismException(rse);
				}

				return mediaData;
			}

			public boolean deleteSingleMediaFromRMS(String storeName, String mediaName)
					throws PersistenceMechanismException, ImageNotFoundException {
				boolean success = false;

				try {
					mediaRS = RecordStore.openRecordStore(album_label + storeName, true);
					mediaInfoRS = RecordStore.openRecordStore(info_label + storeName, true);

					MediaData mediaData = getMediaInfo(mediaName);
					int rid = mediaData.getForeignRecordId();

					mediaRS.deleteRecord(rid);
					mediaInfoRS.deleteRecord(rid);

					mediaRS.closeRecordStore();
					mediaInfoRS.closeRecordStore();
				}
				catch(RecordStoreException rse) {
					throw new PersistenceMechanismException(rse);
				}

				return success;
			}

			public void createNewAlbum(String albumName)
					throws PersistenceMechanismException, InvalidPhotoAlbumNameException {

				RecordStore newAlbumRS = null;
				RecordStore newAlbumInfoRS = null;
				if(albumName.equals("")) {
					throw new InvalidPhotoAlbumNameException();
				}
				String [] names = getAlbumNames();
				for(int i = 0; i < names.length; i ++) {
					if(names[i].equals(albumName))
						throw new InvalidPhotoAlbumNameException();
				}

				try {
					newAlbumRS = RecordStore.openRecordStore(album_label + albumName, true);
					newAlbumInfoRS = RecordStore.openRecordStore(info_label + albumName, true);
					newAlbumRS.closeRecordStore();
					newAlbumInfoRS.closeRecordStore();
				}
				catch(RecordStoreException rse) {
					throw new PersistenceMechanismException(rse);
				}
			}

			public void deleteAlbum(String albumName) throws PersistenceMechanismException {
				try {
					RecordStore.deleteRecordStore(album_label + albumName);
					RecordStore.deleteRecordStore(info_label + albumName);
				}
				catch(RecordStoreException rse) {
					throw new PersistenceMechanismException(rse);
				}
			}

			public String [] getAlbumNames() {
				return albumNames;
			}

			public Hashtable getMediaInfoTable() {
				return mediaInfoTable;
			}

			public void setMediaInfoTable(Hashtable mediaInfoTable) {
				this.mediaInfoTable = mediaInfoTable;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.datamodel;

		public class MediaData {

			private int recordId;
			private int foreignRecordId;
			private String parentAlbumName;
			private String mediaLabel;

			public MediaData(int foreignRecordId, String parentAlbumName, String mediaLabel) {
				super();
				this.foreignRecordId = foreignRecordId;
				this.parentAlbumName = parentAlbumName;
				this.mediaLabel = mediaLabel;
			}

			public int getRecordId() {
				return recordId;
			}

			public void setRecordId(int recordIdParam) {
				recordId = recordIdParam;
			}

			public int getForeignRecordId() {
				return foreignRecordId;
			}

			public void setForeignRecordId(int foreignRecordIdParam) {
				foreignRecordId = foreignRecordIdParam;
			}

			public String getMediaLabel() {
				return mediaLabel;
			}

			public void setMediaLabel(String mediaLabelParam) {
				mediaLabel = mediaLabelParam;
			}

			public String getParentAlbumName() {
				return parentAlbumName;
			}

			public void setParentAlbumName(String parentAlbumNameParam) {
				parentAlbumName = parentAlbumNameParam;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.datamodel;

		public class MultiMediaData extends MediaData {

			private String typemedia;

			public MultiMediaData(int foreignRecordId, String parentAlbumName, String
				mediaLabel, String type) {
				super(foreignRecordId, parentAlbumName, mediaLabel);
				typemedia = type;
			}

			public MultiMediaData(MediaData mdata, String type) {
				super(mdata.getForeignRecordId(), mdata.getParentAlbumName(), mdata.getMediaLabel());

				completeMediaData(mdata);

				this.typemedia = type;
			}

			public String getTypeMedia() {
				return typemedia;
			}

			public void setTypeMedia(String type) {
				this.typemedia = type;
			}

			private void completeMediaData(MediaData mdata) {
				super.setRecordId(mdata.getRecordId());
			}
		}
	}

	//package lancs.mobilemedia.core.ui.screens

	adds {
		package lancs.mobilemedia.core.ui.screens;

		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.Form;
		import javax.microedition.lcdui.TextField;

		public class AddMediaToAlbum extends Form {

			TextField labeltxt = new TextField("Item label", "", 15, TextField.ANY);
			TextField itempathtxt = new TextField("Path", "", 20, TextField.ANY);

			Command ok;
			Command cancel;

			public AddMediaToAlbum(String title) {
				super(title);
				this.append(labeltxt);
				this.append(itempathtxt);
				ok = new Command("Save Item", Command.SCREEN, 0);
				cancel = new Command("Cancel", Command.EXIT, 1);
				this.addCommand(ok);
				this.addCommand(cancel);
			}

			public String getItemName(){
				return labeltxt.getString();
			}

			public void setItemName(String itemName) {
				labeltxt.setString(itemName);
			}

			public String getPath(){
				return itempathtxt.getString();
			}

			public void setLabelPath(String label) {
				itempathtxt.setLabel(label);
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.screens;

		import javax.microedition.lcdui.Choice;
		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.Image;
		import javax.microedition.lcdui.List;

		public class AlbumListScreen extends List {

			public static final Command exitCommand = new Command("Exit", Command.STOP,	2);
			public static final Command selectCommand = new Command("Select", Command.ITEM, 1);
			public static final Command resetCommand = new Command("Reset", Command.ITEM, 1);
			public static final Command createAlbumCommand = new Command("New Photo Album", Command.ITEM, 1);
			public static final Command deleteAlbumCommand = new Command("Delete Album", Command.ITEM, 1);

			public AlbumListScreen() {
				super("Select Album", Choice.IMPLICIT);
			}

			public AlbumListScreen(String arg0, int arg1) {
				super(arg0, arg1);
			}

			public AlbumListScreen(String arg0, int arg1, String [] arg2, Image [] arg3) {
				super(arg0, arg1, arg2, arg3);
			}

			public void initMenu() {
				this.addCommand(exitCommand);
				this.addCommand(selectCommand);
				this.addCommand(resetCommand);
				this.addCommand(createAlbumCommand);
				this.addCommand(deleteAlbumCommand);
			}

			public void deleteAll() {
				for(int i = 0; i < this.size(); i ++) {
					this.delete(i);
				}
			}

			public void repaintListAlbum(String [] names) {
				String [] albumNames = names;
				this.deleteAll();
				for(int i = 0; i < albumNames.length; i ++) {
					if(albumNames[i] != null) {
						this.append(albumNames[i], null);
					}
				}
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.screens;

		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.Form;
		import javax.microedition.lcdui.Item;
		import javax.microedition.lcdui.TextField;

		public class NewLabelScreen extends Form {

			public static final int NEW_ALBUM = 0;
			public static final int LABEL_PHOTO = 1;

			TextField labelName = new TextField("Name", "", 15, TextField.ANY);

			Command ok;
			Command cancel;

			private int formType;

			public NewLabelScreen(String name, int type) {
				super(name);
				this.formType = type;
				this.append(labelName);
				ok = new Command("Save", Command.SCREEN, 0);
				cancel = new Command("Cancel", Command.EXIT, 1);
				this.addCommand(ok);
				this.addCommand(cancel);
			}

			public NewLabelScreen(String title, Item [] items) {
				super(title, items);
			}

			public String getLabelName() {
				return labelName.getString();
			}

			public void setFormType(int formType) {
				this.formType = formType;
			}

			public int getFormType() {
				return formType;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.screens;

		import javax.microedition.lcdui.Choice;
		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.List;

		public class MediaListScreen extends List {

			public static final int SHOWPHOTO = 1;
			public static final Command viewCommand = new Command("View", Command.ITEM, 1);
			public static final Command backCommand = new Command("Back", Command.BACK, 0);

			protected int typeOfScreen;

			public MediaListScreen(int typeOfScreen) {
				super("Choose Items", Choice.IMPLICIT);
				this.typeOfScreen = typeOfScreen;
			}

			public void initMenu() {
				this.addCommand(viewCommand);
				this.addCommand(backCommand); //TODO dNotPhoto
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.screens;

		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Canvas;
		import javax.microedition.lcdui.Command;
		import javax.microedition.lcdui.Graphics;
		import javax.microedition.lcdui.Image;

		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.util.Constants;
		import lancs.mobilemedia.lib.exceptions.ImageNotFoundException;
		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		public class PhotoViewScreen extends Canvas {

			Image image;
			AlbumData model = null;

			public static final Command backCommand = new Command("Back", Command.BACK, 0);

			public PhotoViewScreen(Image img) {
				image = img;
				initMenu();
			}

			protected void initMenu() {
				this.addCommand(backCommand);
			}

//TODO ver para onde foi
//			public void loadImage() throws ImageNotFoundException,
//			PersistenceMechanismException {
//				image = model.getImageFromRecordStore(null, imageName);
//			}

			protected void paint(Graphics g) {
				g.setGrayScale(255);
				g.fillRect(0, 0, Constants.SCREEN_WIDTH, Constants.SCREEN_HEIGHT);
				System.out.println("Screen size:" + Constants.SCREEN_WIDTH + ":" + Constants.SCREEN_HEIGHT);

				if(image == null)
				System.out.println("PhotoViewScreen::paint(): Image object was null.");

				g.drawImage(image, 0, 0, Graphics.TOP | Graphics.LEFT);
			}
		}
	}

	//package lancs.mobilemedia.core.util;

	adds {
		package lancs.mobilemedia.core.util;

		public class Constants {

			public static final int SCREEN_WIDTH = 176;
			public static final int SCREEN_HEIGHT = 205;

			public static final String ALBUMLIST_SCREEN = "AlbumListScreen";
			public static final String NEWALBUM_SCREEN = "NewAlbumScreen";
			public static final String CONFIRMDELETEALBUM_SCREEN =
			"ConfirmDeleteAlbumScreen";

			public static final String IMAGE_SCREEN = "ImageScreen";
			public static final String IMAGELIST_SCREEN = "ImageListScreen";
			public static final String ADDPHOTOTOALBUM_SCREEN = "AddPhotoToAlbum";
		}
	}

	adds {
		package lancs.mobilemedia.core.util;

		import java.io.IOException;
		import java.io.InputStream;

		import lancs.mobilemedia.core.ui.datamodel.MediaData;
		import lancs.mobilemedia.lib.exceptions.ImagePathNotValidException;
		import lancs.mobilemedia.lib.exceptions.InvalidArrayFormatException;
		import lancs.mobilemedia.lib.exceptions.InvalidImageDataException;
		import lancs.mobilemedia.lib.exceptions.InvalidImageFormatException;

		public class MediaUtil {

			protected static final String DELIMITER = "*";
			protected int endIndex = 0;

			public byte [] readMediaAsByteArray(String mediaFile)
					throws ImagePathNotValidException, InvalidImageFormatException {

				byte bArray [] = new byte[1000];

				InputStream is = null;
				try {
					is = ( InputStream ) this.getClass().getResourceAsStream(mediaFile);
				}
				catch(Exception e) {
					throw new ImagePathNotValidException("Path not valid for this media:" + mediaFile);
				}

				int i, len = 0;
				byte bArray2 [];
				byte b [] = new byte[1];
				try {
					while(is.read(b) != - 1) {
						if(len + 1 >= bArray.length) {
							bArray2 = new byte[bArray.length];

							for(i = 0; i < len; i ++) bArray2[i] = bArray[i];

							bArray = new byte[bArray2.length + 500];

							for(i = 0; i < len; i ++) bArray[i] = bArray2[i];
						}
						bArray[len] = b[0];
						len ++;
					}
					is.close();
				}
				catch(IOException e1) {
					throw new InvalidImageFormatException("The file " + mediaFile + " does not have correct format");
				}
				catch(NullPointerException e2) {
					throw new ImagePathNotValidException("Path not valid for this file:" + mediaFile);
				}
				return bArray;
			}

			public MediaData getMediaInfoFromBytes(byte [] bytes) throws InvalidArrayFormatException {

				try {
					String iiString = new String(bytes);

					int startIndex = 0;
					endIndex = iiString.indexOf(DELIMITER);
					String intString = iiString.substring(startIndex, endIndex);

					startIndex = endIndex + 1;
					endIndex = iiString.indexOf(DELIMITER, startIndex);
					String fidString = iiString.substring(startIndex, endIndex);

					startIndex = endIndex + 1;
					endIndex = iiString.indexOf(DELIMITER, startIndex);
					String albumLabel = iiString.substring(startIndex, endIndex);

					startIndex = endIndex + 1;
					endIndex = iiString.indexOf(DELIMITER, startIndex);

					if(endIndex == - 1) endIndex = iiString.length();

					String imageLabel = iiString.substring(startIndex, endIndex);

					Integer x = Integer.valueOf(fidString);
					MediaData ii = new MediaData(x.intValue(), albumLabel, imageLabel);

					fillMediaInfoFromBytes();

					setMediaFavorite(ii, iiString, startIndex, endIndex, DELIMITER); //from FOP - TODO review

					setMediaNumberOfViews(ii, iiString, startIndex, endIndex, DELIMITER); //from FOP - TODO review

					x = Integer.valueOf(intString);
					ii.setRecordId(x.intValue());
					return ii;
				}
				catch(Exception e) {
					throw new InvalidArrayFormatException();
				}
			}

			protected void setMediaFavorite(MediaData ii, String iiString, int
					startIndex, int endIndex, String delimiter) { //from FOP - TODO review
			}

			protected void setMediaNumberOfViews(MediaData ii, String iiString, int
					startIndex, int endIndex, String delimiter) { //from FOP - TODO review
			}

			public byte [] getBytesFromMediaInfo(MediaData ii) throws InvalidImageDataException {
				try {
					String byteString = retrieveMediaByteString(ii);
					return byteString.getBytes();
				}
				catch(Exception e) {
					throw new InvalidImageDataException("The provided data are not valid");
				}
			}

			private String retrieveMediaByteString(MediaData ii) {
				String byteString = new String();

				int i = ii.getRecordId();
				Integer j = new Integer(i);
				byteString = byteString.concat(j.toString());
				byteString = byteString.concat(DELIMITER);

				int i2 = ii.getForeignRecordId();
				Integer j2 = new Integer(i2);
				byteString = byteString.concat(j2.toString());
				byteString = byteString.concat(DELIMITER);

				byteString = byteString.concat(ii.getParentAlbumName());
				byteString = byteString.concat(DELIMITER);

				byteString = byteString.concat(ii.getMediaLabel());

				return byteString;
			}
		}
	}

	//package lancs.mobilemedia.lib.exceptions

	adds {
		package lancs.mobilemedia.lib.exceptions;

		public class InvalidImageDataException extends Exception {

			private Throwable cause;

			public InvalidImageDataException() {
				super();
			}

			public InvalidImageDataException(String arg0) {
				super(arg0);
			}

			public InvalidImageDataException(Throwable arg0) {
				cause = arg0;
			}

			public Throwable getCause() {
				return cause;
			}
		}
	}

	adds {
		package lancs.mobilemedia.lib.exceptions;

		public class InvalidImageFormatException extends InvalidImageDataException {

			public InvalidImageFormatException() {
			}

			public InvalidImageFormatException(String arg0) {
				super(arg0);
			}

			public InvalidImageFormatException(Throwable arg0) {
				super(arg0);
			}
		}
	}

	adds {
		package lancs.mobilemedia.lib.exceptions;

		public class ImageNotFoundException extends Exception {

			private Throwable cause;

			public ImageNotFoundException() {
			}

			public ImageNotFoundException(String arg0) {
				super(arg0);
			}

			public ImageNotFoundException(Throwable arg0) {
				cause = arg0;
			}

			public Throwable getCause() {
				return cause;
			}
		}
	}

	adds {
		package lancs.mobilemedia.lib.exceptions;

		public class ImagePathNotValidException extends InvalidImageDataException {

			private Throwable cause;

			public ImagePathNotValidException() {
			}

			public ImagePathNotValidException(String arg0) {
				super(arg0);
			}

			public ImagePathNotValidException(Throwable arg0) {
				cause = arg0;
			}

			public Throwable getCause() {
				return cause;
			}
		}
	}

	adds {
		package lancs.mobilemedia.lib.exceptions;

		public class InvalidArrayFormatException extends InvalidImageDataException {

			public InvalidArrayFormatException() {
				super();
			}

			public InvalidArrayFormatException(String arg0) {
				super(arg0);

			}

			public InvalidArrayFormatException(Throwable arg0) {
				super(arg0);
			}
		}
	}

	adds {
		package lancs.mobilemedia.lib.exceptions;

		public class PersistenceMechanismException extends Exception {

			public PersistenceMechanismException(String arg0) {
				super(arg0);
			}

			public PersistenceMechanismException() {
			}

			private Throwable cause;

			public PersistenceMechanismException(Throwable arg0) {
				cause = arg0;
			}

			public Throwable getCause() {
				return cause;
			}
		}
	}

	adds {
		package lancs.mobilemedia.lib.exceptions;

		public class NullAlbumDataReference extends Exception {

			private Throwable cause;

			public NullAlbumDataReference() {
			}

			public NullAlbumDataReference(String arg0) {
				super(arg0);
			}

			public NullAlbumDataReference(Throwable arg0) {
				cause = arg0;
			}

			public Throwable getCause() {
				return cause;
			}
		}
	}

	adds {
		package lancs.mobilemedia.lib.exceptions;

		public class InvalidPhotoAlbumNameException extends Exception {

			public InvalidPhotoAlbumNameException() {
			}

			public InvalidPhotoAlbumNameException(String s) {
				super(s);
			}
		}
	}

	adds {
		package lancs.mobilemedia.lib.exceptions;

		public class UnavailablePhotoAlbumException extends Exception {

			private Throwable cause;

			public UnavailablePhotoAlbumException() {
			}

			public UnavailablePhotoAlbumException(String arg0) {
				super(arg0);
			}

			public UnavailablePhotoAlbumException(Throwable arg0) {
				cause = arg0;
			}

			public Throwable getCause() {
				return cause;
			}
		}
	}
}