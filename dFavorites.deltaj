delta dFavorites {

//package lancs.mobilemedia.core.ui.controller

	modifies lancs.mobilemedia.core.ui.controller.BaseController {

		modifies initCommandsMap() {
			original();
			commands.put("Set Favorite", new SetFavorite());
			commands.put("View Favorites", new ViewFavorites());
		}
	}

	modifies lancs.mobilemedia.core.ui.controller.MediaListController {

		adds public static final int SHOW_MEDIA_LIST_FAVORITES_MODE = 3; //used as showImageList parameter

		modifies fillMediaList(MediaListScreen mediaList, MediaData [] medias, int mediaListMode) {

			if (mediaListMode == SHOW_MEDIA_LIST_FAVORITES_MODE) {
				for (int i = 0; i < medias.length; i++) {
					if (medias[i] != null && medias[i].isFavorite()) {
						mediaList.append(medias[i].getMediaLabel(), null);
					}
				}
			}
			else {
				original(mediaList, medias, mediaListMode);
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import javax.microedition.lcdui.Alert;
		import javax.microedition.lcdui.AlertType;
		import javax.microedition.lcdui.Display;
		import javax.microedition.rms.RecordStoreFullException;

		import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		import lancs.mobilemedia.core.ui.datamodel.MediaData;
		import lancs.mobilemedia.lib.exceptions.ImageNotFoundException;
		import lancs.mobilemedia.lib.exceptions.InvalidImageDataException;
		import lancs.mobilemedia.lib.exceptions.ImagePathNotValidException;
		import lancs.mobilemedia.lib.exceptions.NullAlbumDataReference;
		import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		public class SetFavorite implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				String selectedMediaName = ((MediaController) controller).getSelectedMediaName();
				try {
					MediaData media = controller.getAlbumData().getMediaInfo(selectedMediaName);
					media.toggleFavorite();
					((MediaController) controller).updateMedia(media);
					System.out.println("<* BaseController.handleCommand() *> Image = "+ selectedMediaName + "; Favorite = " + media.isFavorite());
				} catch (ImageNotFoundException e) {
					Alert alert = new Alert("Error", "The selected item was not found in the mobile device", null, AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert, Display.getDisplay(controller.getMidlet()).getCurrent());
				} catch (InvalidImageDataException e) {
					Alert alert = null;
					if (e instanceof ImagePathNotValidException)
						alert = new Alert("Error", "The path is not valid", null, AlertType.ERROR);
					else
						alert = new Alert("Error", "The image file format is not valid", null, AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert, Display.getDisplay(controller.getMidlet()).getCurrent());
				} catch (PersistenceMechanismException e) {
					Alert alert = null;
					if (e.getCause() instanceof  RecordStoreFullException)
						alert = new Alert( "Error", "The mobile database is full", null, AlertType.ERROR);
					else
						alert = new Alert( "Error", "The mobile database can not update new informations", null, AlertType.ERROR);
					Display.getDisplay(controller.getMidlet()).setCurrent(alert, Display.getDisplay(controller.getMidlet()).getCurrent());
				}
				return true;
			}
		}
	}

	adds {
		package lancs.mobilemedia.core.ui.controller;

		import lancs.mobilemedia.core.util.Constants;

		public class ViewFavorites implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {

				((MediaListController) controller).showMediaList(controller.getCurrentStoreName(), MediaListController.SHOW_MEDIA_LIST_FAVORITES_MODE);
				ScreenSingleton.getInstance().setCurrentScreenName(Constants.IMAGELIST_SCREEN);
				return true;
			}
		}
	}

	//package lancs.mobilemedia.core.ui.datamodel

	modifies lancs.mobilemedia.core.ui.datamodel.MediaData {

		adds private boolean favorite = false;

		adds public void toggleFavorite() {
			favorite = ! favorite;
		}

		adds public boolean isFavorite() {
			return favorite;
		}

		adds public void setFavorite(boolean favoriteParam) {
			favorite = favoriteParam;
		}
	}

	modifies lancs.mobilemedia.core.ui.datamodel.MultiMediaData {

		modifies completeMediaData(MediaData mdata) {
			original(mdata);
			super.setFavorite(mdata.isFavorite());
		}
	}

	//package lancs.mobilemedia.core.ui.screens

	modifies lancs.mobilemedia.core.ui.screens.MediaListScreen {

		adds public static final Command favoriteCommand = new
		Command("Set Favorite", Command.ITEM, 1);
		adds public static final Command viewFavoritesCommand = new
		Command("View Favorites", Command.ITEM, 1);

		modifies initMenu() {
			original();
			this.addCommand(favoriteCommand);
			this.addCommand(viewFavoritesCommand);
		}
	}

	//package lancs.mobilemedia.core.util

	modifies lancs.mobilemedia.core.util.ImageUtil {

		adds protected void setImageFavorite(ImageData ii, String iiString,
				int startIndex, int endIndex, String delimiter) {

			boolean favorite = false;

			startIndex = endIndex + 1;
			endIndex = iiString.indexOf(delimiter, startIndex);
			if(endIndex == - 1) endIndex = iiString.length();

			favorite = (iiString.substring(startIndex, endIndex)).equalsIgnoreCase("true");
			ii.setFavorite(favorite);
		}

		modifies retrieveMediaByteString(MediaData ii) {

			String byteString = original(ii);
			byteString = byteString.concat(DELIMITER);

			if (ii.isFavorite()) byteString = byteString.concat("true");
			else byteString = byteString.concat("false");

			return byteString;
		}
	}
}