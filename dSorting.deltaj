delta dSorting {

//package lancs.mobilemedia.core.ui.controller

	modifies lancs.mobilemedia.core.ui.controller.MediaController {

	//adds import lancs.mobilemedia.core.ui.controller.commands.SortByViews;
		adds import lancs.mobilemedia.core.ui.controller.SortByViews;

		modifies initCommandsMap() {
			original();
			commands.put("Sort by Views", new SortByViews());
		}
	}

	modifies lancs.mobilemedia.core.ui.controller.MediaListController {

		adds public static final int SHOW_MEDIA_LIST_SORTING_MODE = 2; //used as showMediaList parameter

		adds public void bubbleSort(MediaData [] medias) {
		//System.out.print("Sorting by BubbleSort...");
			for (int end = medias.length; end > 1; end--) {
				for (int current = 0; current < end - 1; current ++) {
					if (medias[current].getNumberOfViews() > medias[current + 1].getNumberOfViews()) {
						exchange(medias, current, current + 1);
					}
				}
			}
			//System.out.println("done.");
		}

		adds private void exchange(MediaData [] medias, int pos1, int pos2) {
			MediaData tmp = medias[pos1];
			medias[pos1] = medias[pos2];
			medias[pos2] = tmp;
		}

		modifies fillMediaList(MediaListScreen mediaList, MediaData[] medias, int mediaListMode) {

			if (mediaListMode == SHOW_MEDIA_LIST_SORTING_MODE) {
				bubbleSort(medias);
			}

			original(mediaList, medias, mediaListMode);
		}
	}

	//package lancs.mobilemedia.core.ui.controller.commands
	//package lancs.mobilemedia.core.ui.controller

	adds {
	//	package lancs.mobilemedia.core.ui.controller.commands;
		package lancs.mobilemedia.core.ui.controller;

		import lancs.mobilemedia.core.util.Constants;
		import lancs.mobilemedia.core.ui.controller.ControllerCommandInterface;

		public class SortByViews implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				(( MediaListController ) controller).showMediaList(controller.getCurrentStoreName(),
						MediaListController.SHOW_MEDIA_LIST_SORTING_MODE);
				ScreenSingleton.getInstance().setCurrentScreenName(Constants.IMAGELIST_SCREEN);
				return true;
			}
		}
	}

	modifies lancs.mobilemedia.core.ui.controller.ViewPhoto {

		adds import javax.microedition.lcdui.Alert;
		adds import javax.microedition.lcdui.AlertType;
		adds import javax.microedition.lcdui.Display;

		adds import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		adds import lancs.mobilemedia.core.ui.datamodel.MediaData;
		adds import lancs.mobilemedia.lib.exceptions.ImageNotFoundException;
		adds import lancs.mobilemedia.lib.exceptions.InvalidImageDataException;
		adds import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;
		adds import lancs.mobilemedia.lib.exceptions.NullAlbumDataReference;

		adds protected void increasePhotoNumberOfViews(AbstractController controller,
				String selectedImageName) {

			try {
				MediaData media = controller.getAlbumData().getMediaInfo(selectedImageName);
				media.increaseNumberOfViews();
				(( MediaController ) controller).updateMedia(media);
				System.out.println("<* AbstractController.handleCommand() *> Image = " + selectedImageName + "; # views = " + media.getNumberOfViews()); //TODO remover print
			} catch (ImageNotFoundException e) {
                Alert alert = new Alert("Error", "The selected photo was not found in the mobile device", null, AlertType.ERROR);
                Display.getDisplay(controller.getMidlet()).setCurrent(alert, Display.getDisplay(controller.getMidlet()).getCurrent());
            } catch (InvalidImageDataException e) {
                Alert alert = new Alert( "Error", "The image data is not valid", null, AlertType.ERROR);
                alert.setTimeout(5000);
            } catch (PersistenceMechanismException e) {
                Alert alert = new Alert( "Error", "It was not possible to recovery the selected image", null, AlertType.ERROR);
                alert.setTimeout(5000);
            }
		}

		modifies execute(AbstractController controller) {
			increasePhotoNumberOfViews(controller, ((MediaController) controller).getSelectedMediaName());
			return original(controller);
		}
	}

	//package lancs.mobilemedia.core.ui.datamodel

	modifies lancs.mobilemedia.core.ui.datamodel.MediaData {

		adds private int numberOfViews = 0;

		adds public int getNumberOfViews() {
			return numberOfViews;
		}

		adds public void setNumberOfViews(int views) {
			this.numberOfViews = views;
		}

		adds public void increaseNumberOfViews() {
			this.numberOfViews ++;
		}
	}

	modifies lancs.mobilemedia.core.ui.datamodel.MultiMediaData {

		modifies completeMediaData(MediaData mdata) {
			original(mdata);
			super.setNumberOfViews(mdata.getNumberOfViews());
		}
	}

	//package lancs.mobilemedia.core.ui.screens

	modifies lancs.mobilemedia.core.ui.screens.MediaListScreen {

		adds public static final Command sortCommand = new Command("Sort by Views", Command.ITEM, 1);

		modifies initMenu() {
			original();
			this.addCommand(sortCommand);
		}
	}

	//package lancs.mobilemedia.core.util

	modifies lancs.mobilemedia.core.util.MediaUtil {
		adds protected void setMediaNumberOfViews(MediaData ii, String iiString,
				int startIndex, int endIndex, String delimiter) { //from FOP - TODO review

			startIndex = endIndex + 1;
			endIndex = iiString.indexOf(delimiter, startIndex);

			if(endIndex == - 1) endIndex = iiString.length();

			int numberOfViews = 0;
			try {
				numberOfViews = Integer.parseInt(iiString.substring(startIndex, endIndex));
			}
			catch(RuntimeException e) {
				numberOfViews = 0;
				e.printStackTrace();
			}

			ii.setNumberOfViews(numberOfViews);
		}

		modifies retrieveMediaByteString(MediaData ii) {

			String byteString = original(ii);
			byteString = byteString.concat(DELIMITER);
			byteString = byteString.concat("" + ii.getNumberOfViews());

			return byteString;
		}
	}
}