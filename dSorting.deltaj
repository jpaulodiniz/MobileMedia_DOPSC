delta dSorting {

//package lancs.mobilemedia.core.ui.controller

	modifies lancs.mobilemedia.core.ui.controller.PhotoController {

	//adds import lancs.mobilemedia.core.ui.controller.commands.SortByViews;
		adds import lancs.mobilemedia.core.ui.controller.SortByViews;

		modifies initCommandsMap() {
			original();
			commands.put("Sort by Views", new SortByViews());
		}
	}

	modifies lancs.mobilemedia.core.ui.controller.PhotoListController {

		adds public static final int SHOW_IMAGE_LIST_SORTING_MODE = 2; //used as showImageList parameter

		adds public void bubbleSort(ImageData [] images) {
		//System.out.print("Sorting by BubbleSort...");
			for (int end = images.length; end > 1; end--) {
				for (int current = 0; current < end - 1; 	current ++) {
					if (images[current].getNumberOfViews() > images[current + 1].getNumberOfViews()) {
						exchange(images, current, current + 1);
					}
				}
			}
			//System.out.println("done.");
		}

		adds private void exchange(ImageData [] images, int pos1, int pos2) {
			ImageData tmp = images[pos1];
			images[pos1] = images[pos2];
			images[pos2] = tmp;
		}

		modifies fillImageList(PhotoListScreen imageList, ImageData [] images, int imageListMode) {

			if(imageListMode == SHOW_IMAGE_LIST_SORTING_MODE) {
				bubbleSort(images);
			}

			original(imageList, images, imageListMode);
		}
	}

	//package lancs.mobilemedia.core.ui.controller.commands
	//package lancs.mobilemedia.core.ui.controller

	adds {
	//	package lancs.mobilemedia.core.ui.controller.commands;
		package lancs.mobilemedia.core.ui.controller;

		import lancs.mobilemedia.core.util.Constants;
		import lancs.mobilemedia.core.ui.controller.ControllerCommandInterface;

		public class SortByViews implements ControllerCommandInterface {

			public boolean execute(AbstractController controller) {
				((PhotoListController )	controller).showImageList(controller.getCurrentStoreName(),
						PhotoListController.SHOW_IMAGE_LIST_SORTING_MODE);
				ScreenSingleton.getInstance().setCurrentScreenName(Constants.IMAGELIST_SCREEN);
				return true;
			}
		}
	}

	modifies lancs.mobilemedia.core.ui.controller.ViewPhoto {

		adds import javax.microedition.lcdui.Alert;
		adds import javax.microedition.lcdui.AlertType;
		adds import javax.microedition.lcdui.Display;
		adds import javax.microedition.rms.RecordStoreFullException;

		adds import lancs.mobilemedia.core.ui.datamodel.AlbumData;
		adds import lancs.mobilemedia.core.ui.datamodel.ImageData;
		adds import lancs.mobilemedia.lib.exceptions.ImageNotFoundException;
		adds import lancs.mobilemedia.lib.exceptions.ImagePathNotValidException;
		adds import lancs.mobilemedia.lib.exceptions.InvalidImageDataException;
		adds import lancs.mobilemedia.lib.exceptions.NullAlbumDataReference;
		adds import lancs.mobilemedia.lib.exceptions.PersistenceMechanismException;

		adds protected void increasePhotoNumberOfViews(AbstractController controller, String selectedImageName) {

			try {
				ImageData image = controller.getAlbumData().getImageInfo(selectedImageName);
				image.increaseNumberOfViews();
				((PhotoController) controller).updateImage(image);
				System.out.println("<* BaseController.handleCommand() *> Image = " + selectedImageName + "; # views = " + image.getNumberOfViews());
			} catch (ImageNotFoundException e) {
				Alert alert = new Alert("Error", "The selected photo was not found in the mobile device", null, AlertType.ERROR);
				Display.getDisplay(controller.getMidlet()).setCurrent(alert, Display.getDisplay(controller.getMidlet()).getCurrent());
			} catch (NullAlbumDataReference e) {
				controller.setAlbumData(new AlbumData());
				Alert alert = new Alert( "Error", "The operation is not available. Try again later !", null, AlertType.ERROR);
				Display.getDisplay(controller.getMidlet()).setCurrent(alert, Display.getDisplay(controller.getMidlet()).getCurrent());
			} catch (InvalidImageDataException e) {
				Alert alert = null;
				if (e instanceof ImagePathNotValidException)
					alert = new Alert("Error", "The path is not valid", null, AlertType.ERROR);
				else
					alert = new Alert("Error", "The image file format is not valid", null, AlertType.ERROR);
				Display.getDisplay(controller.getMidlet()).setCurrent(alert, Display.getDisplay(controller.getMidlet()).getCurrent());
			} catch (PersistenceMechanismException e) {
				Alert alert = null;
				if (e.getCause() instanceof  RecordStoreFullException)
					alert = new Alert( "Error", "The mobile database is full", null, AlertType.ERROR);
				else
					alert = new Alert( "Error", "The mobile database can not update new informations", null, AlertType.ERROR);
				Display.getDisplay(controller.getMidlet()).setCurrent(alert, Display.getDisplay(controller.getMidlet()).getCurrent());
			}
		}

		modifies execute(AbstractController controller) {
			increasePhotoNumberOfViews(controller, ((PhotoController) controller).getSelectedImageName());
			return original(controller);
		}
	}

	//package lancs.mobilemedia.core.ui.datamodel

	modifies lancs.mobilemedia.core.ui.datamodel.ImageData {

		adds private int numberOfViews = 0;

		adds public int getNumberOfViews() {
			return numberOfViews;
		}

		adds public void setNumberOfViews(int views) {
			this.numberOfViews = views;
		}

		adds public void increaseNumberOfViews() {
			this.numberOfViews ++;
		}
	}

	//package lancs.mobilemedia.core.ui.screens

	modifies lancs.mobilemedia.core.ui.screens.PhotoListScreen {

		adds public static final Command sortCommand = new Command("Sort by Views", Command.ITEM, 1);

		modifies initMenu() {
			original();
			this.addCommand(sortCommand);
		}
	}

	//package lancs.mobilemedia.core.util

	modifies lancs.mobilemedia.core.util.ImageUtil {
		adds protected void setImageNumberOfViews(ImageData ii, String iiString,
				int	startIndex, int endIndex, String delimiter) {

			startIndex = endIndex + 1;
			endIndex = iiString.indexOf(delimiter, startIndex);

			if(endIndex == - 1) endIndex = iiString.length();

			int numberOfViews = 0;
			try {
				numberOfViews = Integer.parseInt(iiString.substring(startIndex, endIndex));
			}
			catch(RuntimeException e) {
				numberOfViews = 0;
				e.printStackTrace();
			}

			ii.setNumberOfViews(numberOfViews);
		}

		modifies retrieveImageByteString(ImageData ii) {

			String byteString = original(ii);
			byteString = byteString.concat(DELIMITER);
			byteString = byteString.concat("" + ii.getNumberOfViews());

			return byteString;
		}
	}
}